// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: symbols.sql

package db

import (
	"context"
	"database/sql"
)

const insertSymbol = `-- name: InsertSymbol :exec
INSERT INTO symbols (created_ts, name, symbol, exchange, asset_type, status, deleted_ts)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (symbol) DO UPDATE
SET created_ts = EXCLUDED.created_ts,
    name = EXCLUDED.name,
    exchange = EXCLUDED.exchange,
    asset_type = EXCLUDED.asset_type,
    status = EXCLUDED.status,
    deleted_ts = EXCLUDED.deleted_ts
`

type InsertSymbolParams struct {
	CreatedTs sql.NullTime   `json:"created_ts"`
	Name      sql.NullString `json:"name"`
	Symbol    sql.NullString `json:"symbol"`
	Exchange  sql.NullString `json:"exchange"`
	AssetType sql.NullString `json:"asset_type"`
	Status    sql.NullBool   `json:"status"`
	DeletedTs sql.NullTime   `json:"deleted_ts"`
}

func (q *Queries) InsertSymbol(ctx context.Context, arg InsertSymbolParams) error {
	_, err := q.db.ExecContext(ctx, insertSymbol,
		arg.CreatedTs,
		arg.Name,
		arg.Symbol,
		arg.Exchange,
		arg.AssetType,
		arg.Status,
		arg.DeletedTs,
	)
	return err
}

const listSymbols = `-- name: ListSymbols :many
SELECT id, created_ts, name, symbol, exchange, asset_type, status
FROM symbols
WHERE deleted_ts IS NULL
`

type ListSymbolsRow struct {
	ID        int32          `json:"id"`
	CreatedTs sql.NullTime   `json:"created_ts"`
	Name      sql.NullString `json:"name"`
	Symbol    sql.NullString `json:"symbol"`
	Exchange  sql.NullString `json:"exchange"`
	AssetType sql.NullString `json:"asset_type"`
	Status    sql.NullBool   `json:"status"`
}

func (q *Queries) ListSymbols(ctx context.Context) ([]ListSymbolsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSymbolsRow
	for rows.Next() {
		var i ListSymbolsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedTs,
			&i.Name,
			&i.Symbol,
			&i.Exchange,
			&i.AssetType,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
